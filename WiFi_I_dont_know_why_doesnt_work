#define F_CPU 16000000L
#include <avr/io.h>
#include <stdio.h>
#include <util/delay.h>
#include <string.h>
#include <stdbool.h>

/*
void UART0_init(void)
{
	UCSR0A |= (1 << U2X1);                    // 1번 UART 2배속 모드
	UCSR0B |= (1 << RXEN1) | (1 << TXEN1);      // 송수신 활성화
	UCSR0C |= (1 << UCSZ11) | (1 << UCSZ10);   // 8비트
	UBRR0H = 0;
	UBRR0L = 16;               // 보율 115200
}
void UART0_print_string(char *str)			// 문자열 송신 함수
{
	for(int i=0; str[i];i++)			// '\0'문자를 만날 때까지 반복
	{
		while( ! (UCSR0A & (1 << UDRE0)));	// 송신 가능 대기
		UDR0 = str[i];				// 1바이트 단위로 송신
	}
}*/

void UART1_init(void)
{
	UCSR1A |= (1 << U2X1);                    // 1번 UART 2배속 모드
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);      // 송수신 활성화
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);   // 8비트
	UBRR1H = 0;
	UBRR1L = 16;               // 보율 115200
}

void UART1_transmit(char data)
{
	while( !(UCSR1A & (1 << UDRE1)));   //내가 데이터를 보낼 수 있을 때까지 기다리기
	UDR1 = data;
}

void UART1_string_transmit(char *str)
{
	for(int i = 0; str[i]; i++)    //들어오는 문자를 문자열로 저장
	UART1_transmit(str[i]);
}

unsigned char UART1_receive(void)
{
	while( !(UCSR1A & (1 << RXC1)));  //읽을 게 있을 때 까지 기다리기
	return UDR1;
}

void UART1_string_receive(char *str)
{
	int i;
	char data = UART1_receive();
	for(i = 0; data != '\n'; i++)     //\n이 들어올 때까지의 문자를 data에 저장
	{
		str[i] = data;
		data = UART1_receive();
	}
}

void str_clean(char *str)
{
	for(int i = 0; str[i] != '\0'; i++)  //str[i] = 0이 아닌 동안
	str[i] = '\0';       //str[i] = 0
}

int main(void)
{
	DDRE = 0xFF; // 0b11111111
	char temp[800]; //받는 문자열 길이 800
	//char subtemp[800];

	UART1_init();
	//UART0_init();

	//    UART1_string_transmit("AT+RST\r\n"); //reset
	//    UART1_string_receive(temp);
	//    _delay_ms(100);
	
	//    UART1_string_transmit("ATE0\r\n");  //echo off
	//    _delay_ms(100);
	//    UART1_string_receive(temp);
	
	UART1_string_transmit("AT+CWMODE=1\r\n");  //wifi mode 설정
	UART1_string_receive(temp);
	_delay_ms(5000);
	
	UART1_string_transmit("AT+CWJAP=\"GC_free_WiFi\",\"\"\r\n");  //wifi 연결
	UART1_string_receive(temp);
	_delay_ms(5000);
	
	//str_clean(weather);
	
	UART1_string_transmit("AT+CIPSTART=\"TCP\",\"api.openweathermap.org\",80\r\n");   // api 요청, 형식:<type><remoteIP><remote port>
	UART1_string_receive(temp);
	_delay_ms(5000);
	
	UART1_string_transmit("AT+CIPSEND=166\r\n"); //보내는 문자 길이 166
	UART1_string_receive(temp);
	_delay_ms(5000);
	
	UART1_string_transmit("GET /data/2.5/weather?id=1835848&units=metric&APPID=61ac995a53174ce097bba7a6ff6d7d82\r\n");
	UART1_string_transmit("Host: api.openweathermap.org\r\n");
	UART1_string_transmit("User-Agent: ArduinoWiFi/1.1\r\n");
	UART1_string_transmit("Connection: close\r\n\r\n"); //166
	UART1_string_receive(temp);
	
	int data_size = strlen(temp);
	char newtemp[3] ={NULL};
	
	for(int i=0;i<data_size;i++){
		if (temp[i] == 't' && temp[i + 1] == 'e' && temp[i + 2] == 'm' && temp[i + 3] == 'p' && temp[i+4] == '"') {
			newtemp[0] = temp[i + 6];
			newtemp[1] = temp[i + 7];
			newtemp[2] = '\0'; //0을 넣어야 쓰레기값이 안나옴
		}
	}
	
	int jsontemp[3];
	jsontemp[0]=newtemp[0]-'0'; //char를 int형 변환
	jsontemp[1]=newtemp[1]-'0'; // 형 변환
	jsontemp[2]='\0'; //0을 넣어야 쓰레기값이 안나옴
	
	while(1)
	{
		PORTE = newtemp[0]-'0';
		
		//UART0_print_string(jsontemp[0]);
		//UART0_print_string(jsontemp[1]);
		
		if(jsontemp[0] < 3)
		{
			PORTE = 0b01010101;
			_delay_ms(200);
			break;
		}
		
		if(jsontemp[0] <= 2){
			if(jsontemp[1] < 6){
				PORTE = 0b01010101;
				_delay_ms(200);
				break;
			}
		}
		
		else{
			PORTE = 0b11111111;
			_delay_ms(500);
			break;
		}
				
	}
	//printf("%d%d",jsontemp[0],jsontemp[1]);	
	
	return 0;
	
}
